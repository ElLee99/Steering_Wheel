
Steering_Wheel_Load_Cell.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000797  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cb  00000000  00000000  000009cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032d  00000000  00000000  00001096  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c4  00000000  00000000  00001827  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000018eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_6>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 89 00 	call	0x112	; 0x112 <main>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <WDT_init>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  80:	f8 94       	cli
#include <DEFINES.h>


void WDT_init(void){
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		__watchdog_reset();														/*Reset Watchdog Timer*/
  82:	a8 95       	wdr
		WDTCSR |= (1<<WDCE) | (1<<WDE);											/*Watchdog Change Enable and Watchdog System Reset Enable, necessary to change the prescaler*/
  84:	e0 e6       	ldi	r30, 0x60	; 96
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	88 61       	ori	r24, 0x18	; 24
  8c:	80 83       	st	Z, r24
		WDTCSR  = (1<<WDIE) | (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);		/* Watchdog System Reset Enable, Watchdog Interrupt Enable, Changes Time-Out to 2 seconds*/
  8e:	8f e4       	ldi	r24, 0x4F	; 79
  90:	80 83       	st	Z, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
  92:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
  94:	08 95       	ret

00000096 <GPIO_init>:
	}																			/*Goes to WDT Interruption before reset*/
}


void GPIO_init(void){
	DDRD |= (1<<ALARM_PIN);							/*Set ALARMA_PIN as Output*/
  96:	54 9a       	sbi	0x0a, 4	; 10
  98:	08 95       	ret

0000009a <ADC_Init_CHO>:
}


void ADC_Init_CHO(void){
	
	DDRC &= ~(1<<PORTC0);							/*Input with...*/
  9a:	38 98       	cbi	0x07, 0	; 7
	PORTC &= ~(1<<PORTC0);							/*..Tri-state (Hi-Z)*/
  9c:	40 98       	cbi	0x08, 0	; 8
	
	DIDR0 = (1<<ADC0D);								/* Digital Input Disable*/
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
	
	ADMUX =  (1<<REFS0);							/* Voltage Reference Selections, AVCC with external capacitor at AREF pin*/
  a4:	80 e4       	ldi	r24, 0x40	; 64
  a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
													/*Analog Channel 0 by Default*/
					
	ADCSRA = (1<<ADEN);								/* ADC Enable*/
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADATE);							/* ADC Auto Trigger Enable*/
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE);							/* ADC Interrupt Enable*/
  b8:	80 81       	ld	r24, Z
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);	/*ADC Prescaler Select 128*/
  be:	80 81       	ld	r24, Z
  c0:	87 60       	ori	r24, 0x07	; 7
  c2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);							/*ADC Start Conversion*/
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <__vector_6>:
	
}

ISR(WDT_vect){
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
	/*Escribir funcion de que hacer en 
	caso de que el watchdog expire, antes de resetear*/
}
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_21>:

ISR(ADC_vect){
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
	if (ADC <= MIN_VALUE) {PORTD |= (1<<ALARM_PIN);}
  ee:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  f2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  f6:	85 36       	cpi	r24, 0x65	; 101
  f8:	91 05       	cpc	r25, r1
  fa:	10 f4       	brcc	.+4      	; 0x100 <__vector_21+0x20>
  fc:	5c 9a       	sbi	0x0b, 4	; 11
  fe:	01 c0       	rjmp	.+2      	; 0x102 <__vector_21+0x22>
	else{PORTD &= ~(1<<ALARM_PIN);}
 100:	5c 98       	cbi	0x0b, 4	; 11
	__watchdog_reset();
 102:	a8 95       	wdr
}
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <main>:

int main(void)
{
	GPIO_init();
 112:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_init>
	ADC_Init_CHO();
 116:	0e 94 4d 00 	call	0x9a	; 0x9a <ADC_Init_CHO>
	WDT_init();
 11a:	0e 94 40 00 	call	0x80	; 0x80 <WDT_init>
	sei();
 11e:	78 94       	sei
 120:	ff cf       	rjmp	.-2      	; 0x120 <main+0xe>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
